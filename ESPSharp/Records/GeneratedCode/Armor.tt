
<#@ output extension=".cs" #>
<#	
	ClassTemplate template = new ClassTemplate();
	template.ClassName = "Armor";

	RecordField tempField;

	tempField = 
		new RecordField(
			"EDID",
			typeof(SimpleSubrecord<string>),
			"EditorID",
			"EditorID"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"OBND",
			typeof(ObjectBounds),
			"ObjectBounds",
			"ObjectBounds"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"FULL",
			typeof(SimpleSubrecord<string>),
			"Name",
			"Name"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"SCRI",
			typeof(RecordReference),
			"Script",
			"Script"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"EITM",
			typeof(RecordReference),
			"ObjectEffect",
			"ObjectEffect"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"BMDT",
			typeof(BipedData),
			"BipedData",
			"BipedData"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MODL",
			typeof(SimpleSubrecord<string>),
			"MaleBipedModelFileName",
			"Models/Biped/Male/FileName"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MODT",
			typeof(SimpleSubrecord<byte[]>),
			"MaleBipedModelTextureHashes",
			"Models/Biped/Male/TextureHashes"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MODS",
			typeof(AlternateTextures),
			"MaleBipedModelAlternateTextures",
			"Models/Biped/Male/AlternateTextures"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MODD",
			typeof(SimpleSubrecord<FaceGenModelFlags>),
			"MaleBipedModelFaceGenModelFlags",
			"Models/Biped/Male/FaceGenModelFlags"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MOD2",
			typeof(SimpleSubrecord<string>),
			"MaleWorldModelFileName",
			"Models/World/Male/FileName"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO2T",
			typeof(SimpleSubrecord<byte[]>),
			"MaleWorldModelTextureHashes",
			"Models/World/Male/TextureHashes"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO2S",
			typeof(AlternateTextures),
			"MaleWorldModelAlternateTextures",
			"Models/World/Male/AlternateTextures"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"ICON",
			typeof(SimpleSubrecord<string>),
			"MaleInventoryIcon",
			"Icon/Inventory/Male"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MICO",
			typeof(SimpleSubrecord<string>),
			"MaleMessageIcon",
			"Icon/Message/Male"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MOD3",
			typeof(SimpleSubrecord<string>),
			"FemaleBipedModelFileName",
			"Models/Biped/Female/FileName"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO3T",
			typeof(SimpleSubrecord<byte[]>),
			"FemaleBipedModelTextureHashes",
			"Models/Biped/Female/TextureHashes"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO3S",
			typeof(AlternateTextures),
			"FemaleBipedModelAlternateTextures",
			"Models/Biped/Female/AlternateTextures"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MOSD",
			typeof(SimpleSubrecord<FaceGenModelFlags>),
			"FemaleBipedModelFaceGenModelFlags",
			"Models/Biped/Female/FaceGenModelFlags"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MOD4",
			typeof(SimpleSubrecord<string>),
			"FemaleWorldModelFileName",
			"Models/World/Female/FileName"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO4T",
			typeof(SimpleSubrecord<byte[]>),
			"FemaleWorldModelTextureHashes",
			"Models/World/Female/TextureHashes"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MO4S",
			typeof(AlternateTextures),
			"FemaleWorldModelAlternateTextures",
			"Models/World/Female/AlternateTextures"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"ICO2",
			typeof(SimpleSubrecord<string>),
			"FemaleInventoryIcon",
			"Icon/Inventory/Female"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"MIC2",
			typeof(SimpleSubrecord<string>),
			"FemaleMessageIcon",
			"Icon/Message/Female"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"BMCT",
			typeof(SimpleSubrecord<string>),
			"RagdollConstraintTemplate",
			"RagdollConstraintTemplate"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"REPL",
			typeof(RecordReference),
			"RepairList",
			"RepairList"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"BIPL",
			typeof(RecordReference),
			"BipedModelList",
			"BipedModelList"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"ETYP",
			typeof(SimpleSubrecord<EquipmentType>),
			"EquipmentType",
			"EquipmentType"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"YNAM",
			typeof(RecordReference),
			"PickupSound",
			"PickupSound"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"ZNAM",
			typeof(RecordReference),
			"DropSound",
			"DropSound"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"DATA",
			typeof(ArmorData),
			"Data",
			"Data"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"DNAM",
			typeof(ArmorExtraData),
			"ExtraData",
			"ExtraData"
			);
	tempField.isRequired = true;
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"BNAM",
			typeof(SimpleSubrecord<NoYes>),
			"OverridesAnimationSounds",
			"OverridesAnimationSounds"
			);
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"SNAM",
			typeof(List<AnimationSound>),
			"AnimationSounds",
			"AnimationSounds"
			);
	tempField.XMLSubNames = new List<string> {"Sound"};
	template.Fields.Add(tempField);

	tempField = 
		new RecordField(
			"TNAM",
			typeof(RecordReference),
			"AnimationSoundsTemplate",
			"AnimationSoundsTemplate"
			);
	template.Fields.Add(tempField);
#>
<#@ include file="RecordTemplate.t4" once="true" #>