
<#@ output extension=".cs" #>
<#	
	ClassTemplate template = new ClassTemplate();
	template.ClassName = "ImageSpaceData";

	ClassField tempField;

	tempField = 
		new ClassField(
			typeof(float),
			"HDREyeAdaptSpeed",
			"HDR/EyeAdaptSpeed"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRBlurRadius",
			"HDR/Blur/Radius"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRBlurPasses",
			"HDR/Blur/Passes"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDREmissiveMult",
			"HDR/EmissiveMult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRLUMTarget",
			"HDR/LUM/Target"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRLUMUpperClamp",
			"HDR/LUM/UpperClamp"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRBrightScale",
			"HDR/Bright/Scale"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRBrightClamp",
			"HDR/Bright/Clamp"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRLUMRampNoTex",
			"HDR/LUM/RampNoTex"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRLUMRampMin",
			"HDR/LUM/RampMin"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRLUMRampMax",
			"HDR/LUM/RampMax"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRSunlightDimmer",
			"HDR/SunlightDimmer"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRGrassDimmer",
			"HDR/GrassDimmer"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRTreeDimmer",
			"HDR/TreeDimmer"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"HDRSkinDimmer",
			"HDR/SkinDimmer"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"BloomBlurRadius",
			"Bloom/BlurRadius"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"BloomAlphaMultInterior",
			"Bloom/AlphaMult/Interior"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"BloomAlphaMultExterior",
			"Bloom/AlphaMult/Exterior"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"GetHitBlurRadius",
			"GetHit/Blur/Radius"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"GetHitBlurDampingConstant",
			"GetHit/Blur/DampingConstant"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"NightEyeTintColorRed",
			"NightEyeTintColor/Red"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"NightEyeTintColorGreen",
			"NightEyeTintColor/Green"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"NightEyeTintColorBlue",
			"NightEyeTintColor/Blue"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"Brightness",
			"Brightness"
			);
	template.hashKey = tempField;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicSaturation",
			"Cinematic/Saturation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicContrastAvgLUMValue",
			"Cinematic/Contrast/AvgLUMValue"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicContrastValue",
			"Cinematic/Contrast/Value"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicBrightnessTintColorRed",
			"Cinematic/BrightnessTint/Color/Red"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicBrightnessTintColorGreen",
			"Cinematic/BrightnessTint/Color/Green"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicBrightnessTintColorBlue",
			"Cinematic/BrightnessTint/Color/Blue"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"CinematicBrightnessTintValue",
			"Cinematic/BrightnessTint/Value"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte[]),
			"Unused1",
			"Unused1"
			);
	tempField.byteCount = 16;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(ImageSpaceFlags),
			"Flags",
			"Flags"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte[]),
			"Unused2",
			"Unused2"
			);
	tempField.byteCount = 3;
	template.Fields.Add(tempField);
#>
<#@ include file="SubrecordTemplate.t4" once="true" #>