<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#	
	SubrecordTemplate template = new SubrecordTemplate();
	template.ClassName = "GrassData";

	SubrecordField tempField;

	tempField = 
		new SubrecordField(
			typeof(byte),
			"Density",
			"Density"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"MinSlope",
			"Slope/Min"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"MaxSlope",
			"Slope/Max"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"Unused1",
			"Unused/Unused1"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(ushort),
			"UnitFromWaterAmount",
			"UnitFromWater/Amount"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte[]),
			"Unused2",
			"Unused/Unused2"
			);
	tempField.byteCount = 2;
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(UnitFromWaterType),
			"UnitFromWaterType",
			"UnitFromWater/Type"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"PositionRange",
			"PositionRange"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"HeightRange",
			"HeightRange"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"ColorRange",
			"ColorRange"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"WavePeriod",
			"WavePeriod"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(GrassFlags),
			"Flags",
			"Flags"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte[]),
			"Unused3",
			"Unused/Unused3"
			);
	tempField.byteCount = 3;
	template.Fields.Add(tempField);
#>
<#@ include file="SubrecordTemplate.t4" once="true" #>