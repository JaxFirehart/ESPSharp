<#@ assembly name="System.Core" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)/ESPSharp/bin/debug/ESPSharp.dll" #>
<#@ template debug="false" hostspecific="false" language="C#" inherits="ESPSharpCustomT4" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="ESPSharp" #>
<#@ import namespace="ESPSharp.T4" #>
<#@ import namespace="ESPSharp.Enums" #>
<#@ import namespace="ESPSharp.DataTypes" #>
<#@ import namespace="ESPSharp.Interfaces" #>
<#@ import namespace="ESPSharp.Enums.Flags" #>
<#@ import namespace="ESPSharp.Subrecords" #>
<#@ import namespace="ESPSharp.SubrecordCollections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Linq;
using ESPSharp.Enums;
using ESPSharp.Enums.Flags;
using ESPSharp.Interfaces;
using ESPSharp.Subrecords;
using ESPSharp.SubrecordCollections;
using ESPSharp.DataTypes;

namespace ESPSharp.Subrecords
{
	public partial class <#= template.ClassName #> : Subrecord, ICloneable<<#= template.ClassName#>><# WriteInterfaces(template); #>  
	{
		<# foreach (var field in template.Fields) WritePropertyDeclaration(field); #>

		public <#= template.ClassName #>()
		{
			<# foreach (var field in template.Fields) WritePropertyInitializer(field); #>
		}

		public <#= template.ClassName #>(<# WriteParamsConstructorArgs(template);#>)
		{
			<# foreach (var field in template.Fields) WriteParamsConstructorAssignment(field);#>
		}

		public <#= template.ClassName #>(<#= template.ClassName #> copyObject)
		{
			<# foreach (var field in template.Fields) WriteCopyConstructorAssignment(field); #>
		}
	
		protected override void ReadData(ESPReader reader)
		{
			using (MemoryStream stream = new MemoryStream(reader.ReadBytes(size)))
			using (ESPReader subReader = new ESPReader(stream))
			{
				try
				{
					<# foreach (var field in template.Fields) WriteReadBinaryCommand(field); #>
				}
				catch
				{
					return;
				}
			}
		}

		protected override void WriteData(ESPWriter writer)
		{
			<# foreach (var field in template.Fields) WriteWriteBinaryCommand(field); #>
		}

		protected override void WriteDataXML(XElement ele, ElderScrollsPlugin master)
		{
			XElement subEle;
			<# foreach (var field in template.Fields)
			{ 
				WriteLine(""); 
				WriteWriteXMLCommand(field); 
			}#>
		}

		protected override void ReadDataXML(XElement ele, ElderScrollsPlugin master)
		{
			XElement subEle;
			<# foreach (var field in template.Fields)
			{
				WriteLine("");
				WriteReadXMLCommand(field); 
			}#>
		}

		public <#= template.ClassName #> Clone()
		{
			return new <#= template.ClassName #>(this);
		}

<# if(template.isComparable) { #>
        public int CompareTo(<#= template.ClassName #> other)
        {
			<# WriteCompareHashKeyCommand(template); #>
        }

        public static bool operator >(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
            return objA.CompareTo(objB) > 0;
        }

        public static bool operator >=(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
            return objA.CompareTo(objB) >= 0;
        }

        public static bool operator <(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
            return objA.CompareTo(objB) < 0;
        }

        public static bool operator <=(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
            return objA.CompareTo(objB) <= 0;
        }

<#}#>
<# if(template.isEquatable) { #>
        public bool Equals(<#= template.ClassName #> other)
        {
			if (System.Object.ReferenceEquals(this, other))
			{
				return true;
			}

			if (((object)this == null) || ((object)other == null))
			{
				return false;
			}

			return <#= string.Join(" &&\n\t\t\t\t", template.Fields.Select<ClassField, string>(s => s.EqualString))#>;
        }

        public override bool Equals(object obj)
        {
			if (obj == null)
				return false;

            <#= template.ClassName #> other = obj as <#= template.ClassName #>;

            if (other == null)
                return false;
            else
                return Equals(other);
        }

        public override int GetHashCode()
        {
            return <#= template.hashKey.Name#>.GetHashCode();
        }

        public static bool operator ==(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
			if (System.Object.ReferenceEquals(objA, objB))
			{
				return true;
			}

			if (((object)objA == null) || ((object)objB == null))
			{
				return false;
			}

            return objA.Equals(objB);
        }

        public static bool operator !=(<#= template.ClassName #> objA, <#= template.ClassName #> objB)
        {
			if (System.Object.ReferenceEquals(objA, objB))
			{
				return false;
			}

			if (((object)objA == null) || ((object)objB == null))
			{
				return true;
			}

            return !objA.Equals(objB);
        }
<#}#>
<# foreach (var field in template.Fields.Where(f => f.implementReadData == false)) {#>

		partial void Read<#= field.Name #>Binary(ESPReader reader);
<# } #>
<# foreach (var field in template.Fields.Where(f => f.implementWriteData == false)) {#>

		partial void Write<#= field.Name #>Binary(ESPWriter writer);
<# } #>
<# foreach (var field in template.Fields.Where(f => f.implementReadXML == false)) {#>

		partial void Read<#= field.Name #>XML(XElement ele, ElderScrollsPlugin master);
<# } #>
<# foreach (var field in template.Fields.Where(f => f.implementWriteXML == false)) {#>

		partial void Write<#= field.Name #>XML(XElement ele, ElderScrollsPlugin master);
<# } #>
	}
}