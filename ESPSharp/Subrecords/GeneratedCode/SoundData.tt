
<#@ output extension=".cs" #>
<#	
	ClassTemplate template = new ClassTemplate();
	template.ClassName = "SoundData";

	ClassField tempField;

	tempField = 
		new ClassField(
			typeof(byte),
			"MinAttenuationDistance",
			"Attenuation/Distance/Min"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte),
			"MaxAttenuationDistance",
			"Attenuation/Distance/Max"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(sbyte),
			"FrequencyAdjustmentPercentage",
			"FrequencyAdjustmentPercentage"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte),
			"Unused",
			"Unused"
			);
	tempField.implementReadXML = false;
	tempField.implementWriteXML = false;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(SoundDataFlags),
			"SoundDataFlags",
			"Flags"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"StaticAttenuationcdB",
			"Attenuation/StaticAttenuationcdB"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte),
			"StopTime",
			"Time/Stop"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte),
			"StartTime",
			"Time/Start"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"AttenuationCurvePoint1",
			"Attenuation/Curve/Point1"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"AttenuationCurvePoint2",
			"Attenuation/Curve/Point2"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"AttenuationCurvePoint3",
			"Attenuation/Curve/Point3"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"AttenuationCurvePoint4",
			"Attenuation/Curve/Point4"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"AttenuationCurvePoint5",
			"Attenuation/Curve/Point5"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(short),
			"ReverbAttenuationControl",
			"Attenuation/ReverbAttenuationControl"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(int),
			"Priority",
			"Priority"
			);
	template.hashKey = tempField;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte[]),
			"Unknown",
			"Unknown"
			);
	tempField.byteCount = 8;
	template.Fields.Add(tempField);
#>
<#@ include file="SubrecordTemplate.t4" once="true" #>