<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#	
	SubrecordTemplate template = new SubrecordTemplate();
	template.ClassName = "WeaponExtraData";

	SubrecordField tempField;

	tempField = 
		new SubrecordField(
			typeof(WeaponAnimationType),
			"AnimationType",
			"AnimationType"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"AnimationMultiplier",
			"AnimationMultiplier"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Reach",
			"Reach"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponDataFlags1),
			"Flags1",
			"Flags1"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponGripAnimationType),
			"GripAnimation",
			"GripAnimation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"AmmoUse",
			"AmmoUse"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponReloadAnimationType),
			"ReloadAnimation",
			"ReloadAnimation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"MinSpread",
			"MinSpread"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Spread",
			"Spread"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte[]),
			"Unknown",
			"Unknown"
			);
	tempField.byteCount = 4;
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"SightFOV",
			"SightFOV"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Unknown2",
			"Unknown2"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(FormID),
			"Projectile",
			"Projectile"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"BaseVATSToHitChance",
			"BaseVATSToHitChance"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponAttackAnimationType),
			"AttackAnimation",
			"AttackAnimation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"ProjectileCount",
			"ProjectileCount"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(EmbeddedWeaponActorValue),
			"EmbeddedWeaponActorValue",
			"EmbeddedWeaponActorValue"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"MinRange",
			"Range/Min"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"MaxRange",
			"Range/Max"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(LimbKillBehavior),
			"LimbKillBehavior",
			"LimbKillBehavior"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponDataFlags2),
			"Flags2",
			"Flags2"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"AttackAnimationMultiplier",
			"AttackAnimationMultiplier"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"FireRate",
			"FireRate"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"ActionPointCost",
			"ActionPointCost"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"RumbleLeftMotorStrength",
			"Rumble/LeftMotorStrength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"RumbleRightMotorStrength",
			"Rumble/RightMotorStrength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"RumbleDuration",
			"Rumble/Duration"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"DamageToWeaponMult",
			"DamageToWeaponMult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"AttackShotsPerSecond",
			"AttackShotsPerSecond"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"ReloadTime",
			"ReloadTime"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"JamTime",
			"JamTime"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"AimArc",
			"AimArc"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(ActorValues),
			"Skill",
			"Skill"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponRumblePattern),
			"RumblePattern",
			"Rumble/Pattern"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"RumbleWavelength",
			"Rumble/Wavelength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"LimbDamageMult",
			"LimbDamageMult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(ActorValues),
			"ResistanceType",
			"ResistanceType"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"SightUsage",
			"SightUsage"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"SemiAutomaticFireDelayMin",
			"SemiAutomaticFireDelay/Min"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"SemiAutomaticFireDelayMax",
			"SemiAutomaticFireDelay/Max"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Unknown3",
			"Unknown3"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponModEffect),
			"Mod1Effect",
			"Mods/Mod1/Effect"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponModEffect),
			"Mod2Effect",
			"Mods/Mod2/Effect"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponModEffect),
			"Mod3Effect",
			"Mods/Mod3/Effect"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod1ValueA",
			"Mods/Mod1/ValueA"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod2ValueA",
			"Mods/Mod2/ValueA"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod3ValueA",
			"Mods/Mod3/ValueA"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponPowerAttackAnimation),
			"PowerAttackAnimation",
			"PowerAttackAnimation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(uint),
			"StrengthRequirement",
			"StrengthRequirement"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte),
			"Unknown4",
			"Unknown4"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(WeaponReloadAnimationType),
			"Mod1ReloadAnimation",
			"Mods/Mod1/ReloadAnimation"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(byte[]),
			"Unknown5",
			"Unknown5"
			);
	tempField.byteCount = 2;
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"AmmoRegenRate",
			"AmmoRegenRate"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"KillImpulse",
			"KillImpulse"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod1ValueB",
			"Mods/Mod1/ValueB"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod2ValueB",
			"Mods/Mod2/ValueB"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"Mod3ValueB",
			"Mods/Mod3/ValueB"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(float),
			"ImpulseDistance",
			"ImpulseDistance"
			);
	template.Fields.Add(tempField);

	tempField = 
		new SubrecordField(
			typeof(uint),
			"SkillRequirement",
			"SkillRequirement"
			);
	template.Fields.Add(tempField);
#>
<#@ include file="SubrecordTemplate.t4" once="true" #>