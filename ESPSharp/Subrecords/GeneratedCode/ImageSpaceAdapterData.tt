
<#@ output extension=".cs" #>
<#	
	ClassTemplate template = new ClassTemplate();
	template.ClassName = "ImageSpaceAdapterData";

	ClassField tempField;

	tempField = 
		new ClassField(
			typeof(NoYes),
			"IsAnimatable",
			"IsAnimatable"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(float),
			"Duration",
			"Duration"
			);
	template.hashKey = tempField;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDREyeAdaptSpeedMult",
			"HDR/EyeAdaptSpeed/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDREyeAdaptSpeedAdd",
			"HDR/EyeAdaptSpeed/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomBlurRadiusMult",
			"HDR/Bloom/BlurRadius/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomBlurRadiusAdd",
			"HDR/Bloom/BlurRadius/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomThresholdMult",
			"HDR/Bloom/Threshold/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomThresholdAdd",
			"HDR/Bloom/Threshold/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomScaleMult",
			"HDR/Bloom/Scale/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRBloomScaleAdd",
			"HDR/Bloom/Scale/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRTargetLumMinMult",
			"HDR/TargetLum/Min/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRTargetLumMinAdd",
			"HDR/TargetLum/Min/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRTargetLumMaxMult",
			"HDR/TargetLum/Max/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRTargetLumMaxAdd",
			"HDR/TargetLum/Max/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRSunlightScaleMult",
			"HDR/SunlightScale/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRSunlightScaleAdd",
			"HDR/SunlightScale/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRSkyScaleMult",
			"HDR/SkyScale/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"HDRSkyScaleAdd",
			"HDR/SkyScale/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte[]),
			"Unknown1",
			"Unknown1"
			);
	tempField.byteCount = 72;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicSaturationMult",
			"Cinematic/Saturation/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicSaturationAdd",
			"Cinematic/Saturation/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicBrightnessMult",
			"Cinematic/Brightness/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicBrightnessAdd",
			"Cinematic/Brightness/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicContrastMult",
			"Cinematic/Contrast/Mult"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"CinematicContrastAdd",
			"Cinematic/Contrast/Add"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(byte[]),
			"Unknown2",
			"Unknown2"
			);
	tempField.byteCount = 8;
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(Color),
			"TintColor",
			"TintColor"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"BlurRadius",
			"BlurRadius"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"DoubleVisionStrength",
			"DoubleVisionStrength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurStrength",
			"RadialBlur/Strength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurRampUp",
			"RadialBlur/RampUp"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurStart",
			"RadialBlur/Start"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(NoYes),
			"RadialBlurUseTarget",
			"RadialBlur/UseTarget"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurCenterX",
			"RadialBlur/Center/X"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurCenterY",
			"RadialBlur/Center/Y"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"DepthOfFieldStrength",
			"DepthOfField/Strength"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"DepthOfFieldDistance",
			"DepthOfField/Distance"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"DepthOfFieldRange",
			"DepthOfField/Range"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(NoYes),
			"DepthOfFieldUseTarget",
			"DepthOfField/UseTarget"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurRampDown",
			"RadialBlur/RampDown"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(uint),
			"RadialBlurDownStart",
			"RadialBlur/DownStart"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(Color),
			"FadeColor",
			"FadeColor"
			);
	template.Fields.Add(tempField);

	tempField = 
		new ClassField(
			typeof(NoYes),
			"MotionBlurStrength",
			"MotionBlurStrength"
			);
	template.Fields.Add(tempField);
#>
<#@ include file="SubrecordTemplate.t4" once="true" #>