using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Xml.Linq;
using ESPSharp.Enums;
using ESPSharp.Enums.Flags;
using ESPSharp.Subrecords;
using ESPSharp.SubrecordCollections;

namespace ESPSharp.Subrecords
{
	public partial class <#= template.ClassName #> : Subrecord
	{
<# foreach (var field in template.Fields) { #>
		<#= field.PropertyDeclaration #>
<#}#>
	
		protected override void ReadData(ESPReader reader)
		{
<# foreach (var field in template.Fields) { #>
<# if (field.Type.IsEnum) { #>
			<#= field.Name #> = reader.ReadEnum<<#= GetFriendlyName(field.Type)#>>();
<# } else if (field.Type == typeof(byte[])){ #>
			<#= field.Name #> = reader.ReadBytes(<#= field.byteCount #>);
<# } else { #>
			<#= field.Name #> = reader.Read<#= GetFriendlyName(field.Type)#>();
<# } #>
<# } #>
		}

		protected override void WriteData(ESPWriter writer)
		{
<# foreach (var field in template.Fields) { #>
<# if (field.Type.IsEnum) { #>
			writer.Write((<#= GetFriendlyName(Enum.GetUnderlyingType(field.Type))#>)<#= field.Name #>);
<# } else { #>
			writer.Write(<#= field.Name #>);
<# } #>
<# } #>
		}

		protected override void WriteDataXML(XElement ele)
		{
			XElement subEle;
<# foreach (var field in template.Fields) { #>

			ele.TryPathTo("<#= field.XMLPath#>", true, out subEle);
<# if (field.Type == typeof(byte[])){ #>
			subEle.Value = <#= field.Name#>.ToHex();
<# } else { #>
			subEle.Value = <#= field.Name#>.ToString();
<# } #>
<# } #>
		}

		protected override void ReadDataXML(XElement ele)
		{
			XElement subEle;
<# foreach (var field in template.Fields) { #>

			ele.TryPathTo("<#= field.XMLPath#>", false, out subEle);
<# if (field.Type.IsEnum) { #>
			<#= field.Name #> = subEle.ToEnum<<#= GetFriendlyName(field.Type)#>>();
<# } else if (field.Type == typeof(byte[])){ #>
			<#= field.Name #> = subEle.ToBytes();
<# } else { #>
			<#= field.Name #> = subEle.To<#= GetFriendlyName(field.Type)#>();
<# } #>
<# } #>
		}
	}
}
<#+
public class SubrecordTemplate
{
    public string ClassName;
	public List<SubrecordField> Fields = new List<SubrecordField>();
}

public class SubrecordField
{
	public Type Type;
	public string Name;
	public string XMLPath;
	public string XMLSubName;

	public bool isReadOnly = false;
	public bool implementReadData = true;
	public bool implementWriteData = true;
	public bool implementReadXML = true;
	public bool implementWriteXML = true;

	public uint byteCount = 0;

	public SubrecordField()
    {
    }

	public SubrecordField(Type Type, string Name, string XMLPath)
    {
		this.Type = Type;
		this.Name = Name;
		this.XMLPath = XMLPath;
    }

	public string TypeString
    {
        get 
        {
			return GetFriendlyName(Type);
        }
    }

	public string PropertyDeclaration
    {
		get
        {
			string declare = "public " + GetFriendlyName(Type) + " " + Name;

			if (isReadOnly)
				declare += " { get; }";
			else				
				declare += " { get; set; }";

			return declare;
        }
    }
}

public static string ToPrivateCase(string inString)
{
	return string.Format("{0}{1}", inString.Substring(0, 1).ToLowerInvariant(), inString.Substring(1));
}

public static string ToPropertyCase(string inString)
{
	return string.Format("{0}{1}", inString.Substring(0, 1).ToUpperInvariant(), inString.Substring(1));
}

public static string GetFriendlyName(Type inType)
{
	if (inType.IsConstructedGenericType)
    {
		string name = inType.Name.Substring(0, inType.Name.IndexOf('`'));
		string args = string.Join(", ", inType.GenericTypeArguments.Select<Type, string>(t => t.Name));

		return name + "<" + args + ">";
    }
	else if (inType == typeof(object))
		return "dynamic";
	else
		return inType.Name;
}
#>